/*
 * LibTests/NetworkTest.hpp
 * This file is part of Emeraude
 *
 * Copyright (C) 2012-2023 - "LondNoir" <londnoir@gmail.com>
 *
 * Emeraude is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Emeraude is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Emeraude; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 *
 * Complete project and additional information can be found at :
 * https://bitbucket.org/londnoir/emeraude
 * 
 * --- THIS IS AUTOMATICALLY GENERATED, DO NOT CHANGE ---
 */

#pragma once

/* C/C++ standard libraries. */
#include <iostream>

/* Local inclusions */
#include <Network/Network.hpp>

using namespace Libraries;

void
testURIParsing (size_t & errors) noexcept
{
	std::vector< std::string > urls{
		"ftp://ftp.is.co.za/rfc/rfc1808.txt",
		"gopher://spinaltap.micro.umn.edu/00/Weather/California/Los%20Angeles",
		"http://www.math.uio.no/faq/compression-faq/part1.html",
		"mailto:mduerst@ifi.unizh.ch",
		"news:comp.infosystems.www.servers.unix",
		"telnet://melvyl.ucop.edu",
		"irc://irc.freenode.net/ubuntu-fr",
		"ssh://utilisateur@example.com",
		"sftp://utilisateur@example.com",
		"http://example.org/URI/absolu/avec/chemin/absolu/vers/une/ressource",
		"/URI/relatif/avec/chemin/absolu/vers/une/ressource",
		"chemin/relatif/vers/une/ressource",
		"../../../ressource",
		"./ressource#fragment",
		"ressource",
		"https://wilson:12345678;transport=tamere@village.picsum.com:80/200/300?random=1#tamere",
		"#fragment"
	};

	for ( const auto & url : urls )
	{
		Network::URI uri{url};

		if ( url != to_string(uri) )
		{
			errors++;

			std::cout << "FAILED :\n A: " << url << "\n B: " << uri << "\n\n" << std::endl;
		}
		else
		{
			std::cout << "SUCCESS : " << url << std::endl;
		}
	}
}

void
launchNetworkTests (size_t & errors) noexcept
{
	std::cout << "\n\n\n====== Launching Network tests ======\n\n\n" << std::endl;

	//testURIParsing(errors);

    //if ( !Network::download({"http://journal.local/my_photo-1.jpg"}, {"/home/londnoir/dl-test-1.jpg"}, true) )
    //	errors++;

	if ( !Network::download(Network::URI{"https://picsum.photos/200/300"}, Path::File{"/home/londnoir/dl-test-2"}, true) )
		errors++;
}
