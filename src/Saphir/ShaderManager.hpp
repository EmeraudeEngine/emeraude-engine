/*
 * src/Saphir/ShaderManager.hpp
 * This file is part of Emeraude-Engine
 *
 * Copyright (C) 2010-2025 - Sébastien Léon Claude Christian Bémelmans "LondNoir" <londnoir@gmail.com>
 *
 * Emeraude-Engine is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Emeraude-Engine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Emeraude-Engine; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Complete project and additional information can be found at :
 * https://github.com/londnoir/emeraude-engine
 *
 * --- THIS IS AUTOMATICALLY GENERATED, DO NOT CHANGE ---
 */

#pragma once

/* Project configuration files. */
#include "emeraude_config.hpp"

/* STL inclusions. */
#include <array>
#include <cstddef>
#include <cstdint>
#include <map>
#include <memory>
#include <string>
#include <vector>

/* Third-party inclusions. */
#include <vulkan/vulkan.h>
#include "DirStackFileIncluder.hpp"

/* Local inclusions for inheritances. */
#include "ServiceInterface.hpp"

/* Local inclusions for usages. */
#include "Vulkan/Types.hpp"
#include "Saphir/Program.hpp"
#include "Types.hpp"

/* Forward declarations. */
namespace Emeraude
{
	namespace Vulkan
	{
		class Device;
		class ShaderModule;
	}

	namespace Saphir
	{
		class AbstractShader;
	}

	class PrimaryServices;
}

namespace Emeraude::Saphir
{
	static constexpr std::array< const char * const, 6 > ShaderFileExtensions{
		VertexShaderFileExtension,
		TesselationControlShaderFileExtension,
		TesselationEvaluationShaderFileExtension,
		GeometryShaderFileExtension,
		FragmentShaderFileExtension,
		ComputeShaderFileExtension
	};

	/**
	 * @brief The shader manager service class.
	 * @extends Emeraude::ServiceInterface This is a service.
	 */
	class ShaderManager final : public ServiceInterface
	{
		public:

			/** @brief Class identifier. */
			static constexpr auto ClassId{"ShaderManagerService"};

			/** @brief Observable class unique identifier. */
			static const size_t ClassUID;

			/** @brief Observable notification codes. */
			enum NotificationCode
			{
				ShaderCompilationSucceed,
				ShaderCompilationFailed,
				/* Enumeration boundary. */
				MaxEnum
			};

			/**
			 * @brief Constructs the shader manager.
			 * @param primaryServices A reference to the primary services.
			 * @param type The GPU work type.
			 */
			ShaderManager (PrimaryServices & primaryServices, Vulkan::GPUWorkType type) noexcept;

			/**
			 * @brief Copy constructor.
			 * @param copy A reference to the copied instance.
			 */
			ShaderManager (const ShaderManager & copy) noexcept = delete;

			/**
			 * @brief Move constructor.
			 * @param copy A reference to the copied instance.
			 */
			ShaderManager (ShaderManager && copy) noexcept = delete;

			/**
			 * @brief Copy assignment.
			 * @param copy A reference to the copied instance.
			 * @return ShaderManager &
			 */
			ShaderManager & operator= (const ShaderManager & copy) noexcept = delete;

			/**
			 * @brief Move assignment.
			 * @param copy A reference to the copied instance.
			 * @return ShaderManager &
			 */
			ShaderManager & operator= (ShaderManager && copy) noexcept = delete;

			/**
			 * @brief Destructs the shader manager.
			 */
			~ShaderManager () override;

			/** @copydoc Libraries::ObservableTrait::classUID() const */
			[[nodiscard]]
			size_t
			classUID () const noexcept override
			{
				return ClassUID;
			}

			/** @copydoc Libraries::ObservableTrait::is() const */
			[[nodiscard]]
			bool
			is (size_t classUID) const noexcept override
			{
				return classUID == ClassUID;
			}

			/** @copydoc Emeraude::ServiceInterface::usable() */
			[[nodiscard]]
			bool
			usable () const noexcept override
			{
				return m_flags[ServiceInitialized];
			}

			/**
			 * @brief Returns whether the print of generated shader in console is enabled.
			 * @return bool
			 */
			[[nodiscard]]
			bool
			showGeneratedSourceCode () const noexcept
			{
				return m_flags[ShowGeneratedSourceCode];
			}

			/**
			 * @brief Builds a Vulkan shader module a shader generated by the Saphir system.
			 * @param device A reference to a device smart pointer.
			 * @param shader A reference to a Saphir shader.
			 * @return std::shared_ptr< Vulkan::ShaderModule >
			 */
			[[nodiscard]]
			std::shared_ptr< Vulkan::ShaderModule > getShaderModuleFromGeneratedShader (const std::shared_ptr< Vulkan::Device > & device, const AbstractShader & shader) noexcept;

			/**
			 * @brief Builds a Vulkan shader module from source code.
			 * @param device A reference to a device smart pointer.
			 * @param shaderName A reference to a string.
			 * @param shaderType The type of shader.
			 * @param sourceCode A reference to a string.
			 * @return std::shared_ptr< Vulkan::ShaderModule >
			 */
			[[nodiscard]]
			std::shared_ptr< Vulkan::ShaderModule > getShaderModuleFromSourceCode (const std::shared_ptr< Vulkan::Device > & device, const std::string & shaderName, ShaderType shaderType, const std::string & sourceCode) noexcept;

			/**
			 * @brief Returns shader modules corresponding to a program.
			 * @param device A reference to a device smart pointer.
			 * @param program A reference to a program smart pointer.
			 * @return std::vector< std::shared_ptr< Vulkan::ShaderModule > >
			 */
			[[nodiscard]]
			std::vector< std::shared_ptr< Vulkan::ShaderModule > > getShaderModules (const std::shared_ptr< Vulkan::Device > & device, const std::shared_ptr< Program > & program) noexcept;

			/**
			 * @brief Returns the instance of the shader manager.
			 * @param type The transfer work type.
			 * @return ShaderManager *
			 */
			[[nodiscard]]
			static ShaderManager *
			instance (Vulkan::GPUWorkType type) noexcept
			{
				return s_instances.at(static_cast< size_t >(type));
			}

		private:

			/** @copydoc Emeraude::ServiceInterface::onInitialize() */
			bool onInitialize () noexcept override;

			/** @copydoc Emeraude::ServiceInterface::onTerminate() */
			bool onTerminate () noexcept override;

			/**
			 * @brief Returns the shader identification.
			 * @param shaderType The shader type.
			 * @param shaderName A reference to a string.
			 * @return std::string
			 */
			[[nodiscard]]
			static
			std::string
			getShaderIdentificationString (ShaderType shaderType, const std::string & shaderName) noexcept
			{
				std::stringstream output;
				output << to_string(shaderType);
				output << shaderName;

				return output.str();
			}

			/**
			 * @brief Compiles a shader from a saphir generated source code.
			 * @param shader A reference to a shader smart pointer.
			 * @param binaryCode A reference to the binary data vector to complete.
			 * @return bool
			 */
			[[nodiscard]]
			bool compile (const AbstractShader & shader, std::vector< uint32_t > & binaryCode) noexcept;

			/**
			 * @brief Compiles a shader from a source code.
			 * @param shaderName A reference to a string.
			 * @param type The shader type.
			 * @param sourceCode A reference to a string.
			 * @param binaryCode A reference to the binary data vector to complete.
			 * @return bool
			 */
			[[nodiscard]]
			bool compile (const std::string & shaderName, ShaderType type, const std::string & sourceCode, std::vector< uint32_t > & binaryCode) noexcept;

			/**
			 * @brief Writes a shader source code on disk cache.
			 * @param shader A reference to a shader.
			 * @return bool
			 */
			[[nodiscard]]
			bool cacheShaderSourceCode (const AbstractShader & shader) const noexcept;

			/**
			 * @brief Writes a shader binary on disk cache.
			 * @param shader A reference to a shader.
			 * @param binaryCode A reference to the binary data vector.
			 * @return bool
			 */
			[[nodiscard]]
			bool cacheShaderBinary (const AbstractShader & shader, const std::vector< uint32_t > & binaryCode) const noexcept;

			/**
			 * @brief Reads the cache to get shader source codes and binaries.
			 * @return void
			 */
			void readCache () noexcept;

			/**
			 * @brief Removes all sources and binary from shader cache.
			 * @return void
			 */
			void clearCache () noexcept;

			/**
			 * @brief Generates a unique cache filepath for the shader source.
			 * @param shader A reference to a shader.
			 * @return std::filesystem::path
			 */
			[[nodiscard]]
			std::filesystem::path generateShaderSourceCacheFilepath (const AbstractShader & shader) const noexcept;

			/**
			 * @brief Generates a unique cache filepath for the shader binary.
			 * @param shader A reference to a shader.
			 * @return std::filesystem::path
			 */
			[[nodiscard]]
			std::filesystem::path generateShaderBinaryCacheFilepath (const AbstractShader & shader) const noexcept;

			/**
			 * @brief Returns the shader hash from the filepath.
			 * @param filepath A reference to a filesystem path.
			 * @return size_t
			 */
			[[nodiscard]]
			static size_t extractHashFromFilepath (const std::filesystem::path & filepath) noexcept;

			/**
			 * @brief Checks whether a binary exists in the cache.
			 * @param shader A reference to a shader.
			 * @param binaryCode A reference to the binary code to complete if exists in the cache.
			 * @return bool
			 */
			[[nodiscard]]
			bool checkBinaryFromCache (const AbstractShader & shader, std::vector< uint32_t > & binaryCode) noexcept;

			/**
			 * @brief Prints compilation errors.
			 * @param shaderIdentifier A reference to a string.
			 * @param sourceCode A reference to a string.
			 * @param log A pointer to a C-string.
			 * @return void
			 */
			void printCompilationErrors (const std::string & shaderIdentifier, const std::string & sourceCode, const char * log) noexcept;

			/**
			 * @brief Converts shader type from saphir to GLSLang type.
			 * @param shaderType The Saphir shader type.
			 * @return EShLanguage
			 */
			[[nodiscard]]
			static EShLanguage GLSLangShaderType (ShaderType shaderType) noexcept;

			/**
			 * @brief Converts shader type from saphir to Vulkan type.
			 * @param shaderType The Saphir shader type.
			 * @return VkShaderStageFlagBits
			 */
			[[nodiscard]]
			static VkShaderStageFlagBits vkShaderType (ShaderType shaderType) noexcept;

			/* Flag names. */
			static constexpr auto ServiceInitialized{0UL};
			static constexpr auto ShowGeneratedSourceCode{1UL};
			static constexpr auto ShowLoadedSourceCode{2UL};
			static constexpr auto SourceCodeCacheEnabled{3UL};
			static constexpr auto BinaryCacheEnabled{4UL};
			static constexpr auto ForceDefaultVersionAndProfile{5UL};
			static constexpr auto ForwardCompatible{6UL};

			static constexpr auto ShaderSourcesDirectoryName{"shader-sources"};
			static constexpr auto ShaderBinariesDirectoryName{"shader-binaries"};

			static std::array< ShaderManager *, 2 > s_instances;

			PrimaryServices & m_primaryServices;
			std::map< size_t, std::shared_ptr< Vulkan::ShaderModule > > m_shaderModules;
			std::map< size_t, std::filesystem::path > m_cachedShaderSourceCodes;
			std::map< size_t, std::filesystem::path > m_cachedShaderBinaries;
			std::filesystem::path m_shadersSourcesDirectory;
			std::filesystem::path m_shadersBinariesDirectory;
			TBuiltInResource m_builtInResource{};
			DirStackFileIncluder m_includer;
			EProfile m_profile{ECoreProfile}; // ENoProfile
			int m_defaultVersion{100};
			EShMessages m_messageFilter{static_cast< EShMessages >(EShMsgDefault | EShMsgSpvRules | EShMsgVulkanRules | EShMsgDebugInfo)};
			std::array< bool, 8 > m_flags{
				false/*ServiceInitialized*/,
				BOOLEAN_FOLLOWING_DEBUG/*ShowGeneratedSourceCode*/,
				BOOLEAN_FOLLOWING_DEBUG/*ShowLoadedSourceCode*/,
				!BOOLEAN_FOLLOWING_DEBUG/*SourceCodeCacheEnabled*/,
				!BOOLEAN_FOLLOWING_DEBUG/*BinaryCacheEnabled*/,
				false/*ForceDefaultVersionAndProfile*/,
				false/*ForwardCompatible*/,
				true/*UNUSED*/
			};
	};
}
