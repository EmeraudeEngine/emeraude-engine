/*
 * Emeraude/Scenes/Manager.hpp
 * This file is part of Emeraude
 *
 * Copyright (C) 2012-2023 - "LondNoir" <londnoir@gmail.com>
 *
 * Emeraude is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Emeraude is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Emeraude; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 *
 * Complete project and additional information can be found at :
 * https://bitbucket.org/londnoir/emeraude
 * 
 * --- THIS IS AUTOMATICALLY GENERATED, DO NOT CHANGE ---
 */

#pragma once

/* C/C++ standard libraries. */
#include <map>
#include <memory>
#include <string>

/* Local inclusions for inheritances. */
#include "ServiceInterface.hpp"

/* Local inclusions for usages. */
#include "DefinitionResource.hpp"
#include "Scene.hpp"

/* Forward declarations. */
namespace Emeraude
{
	namespace Resources
	{
		class Manager;
	}

	namespace Graphics
	{
		class Renderer;
	}

	class Arguments;
	class Settings;
}

namespace Emeraude::Scenes
{
	/**
	 * @brief The scene manager service class.
	 * @extends Emeraude::ServiceInterface This is a service.
	 */
	class Manager final : public ServiceInterface
	{
		public:

			using SceneLoading = std::pair< std::shared_ptr< Scene >, std::shared_ptr< DefinitionResource > >;

			/** @brief Class identifier. */
			static constexpr auto ClassId{"ScenesManagerService"};

			/** @brief Observable class unique identifier. */
			static const size_t ClassUID;

			/* Settings keys */
			static constexpr auto AutoExpandEnabledKey = "Performances/AutoExpandEnabled";
			static constexpr auto DefaultAutoExpandEnabled = true;
			static constexpr auto AutoExpandAtKey = "Performances/AutoExpandAt";
			static constexpr auto DefaultAutoExpandAt = 32;

			/** @brief Observable notification codes. */
			enum NotificationCode
			{
				SceneCreated,
				SceneLoaded,
				SceneDestroyed,
				SceneActivated,
				SceneDeactivated,
				/* Enumeration boundary. */
				MaxEnum
			};

			/**
			 * @brief Constructs the scene manager.
			 * @param arguments A reference to the application arguments.
			 * @param coreSettings A reference to the core settings.
			 * @param applicationSettings A reference to the user settings.
			 * @param resourceManager A reference to the resource manager.
			 * @param renderer A reference to the renderer.
			 */
			Manager (const Arguments & arguments, Settings & coreSettings, Settings & applicationSettings, Resources::Manager & resourceManager, Graphics::Renderer & renderer) noexcept;

			/** @copydoc Libraries::Observable::is() */
			[[nodiscard]]
			bool is (size_t classUID) const noexcept override;

			/** @copydoc Emeraude::ServiceInterface::usable() */
			[[nodiscard]]
			bool usable () const noexcept override;

			/**
			 * @brief Returns whether a scene exists under the name.
			 * @param sceneName A reference to a string.
			 * @return bool
			 */
			[[nodiscard]]
			bool hasSceneNamed (const std::string & sceneName) const noexcept;

			/**
			 * @brief Creates a new scene.
			 * @note Will return nullptr on existing scene name !
			 * @param sceneName A reference to a string to name it.
			 * @param boundary The distance in all directions to limit the area.
			 * @param background A reference to a background smart pointer. Default autogenerated.
			 * @param sceneArea A reference to a sceneArea smart pointer. Default autogenerated.
			 * @param seaLevel A reference to a seaLevel smart pointer. Default none.
			 * @return std::shared_ptr< Scene >
			 */
			[[nodiscard]]
			std::shared_ptr< Scene > newScene (const std::string & sceneName, float boundary, const std::shared_ptr< Graphics::Renderable::AbstractBackground > & background = nullptr, const std::shared_ptr< Graphics::Renderable::AbstractSceneArea > & sceneArea = nullptr, const std::shared_ptr< Graphics::Renderable::AbstractSeaLevel > & seaLevel = nullptr) noexcept;

			/**
			 * @brief Loads a scene from a scene definition in the resource store.
			 * @note If no problem found, the method Manager::loadScene(const std::shared_ptr< DefinitionResource > &) will handle the loading.
			 * @param resourceName The name of the resource.
			 * @return std::pair< std::shared_ptr< Scene >, std::shared_ptr< DefinitionResource > >
			 */
			[[nodiscard]]
			SceneLoading loadScene (const std::string & resourceName) noexcept;

			/**
			 * @brief Loads a scene from an external scene definition file. This file will be added in the resource store.
			 * @note If no problem found, the method Manager::loadScene(const std::shared_ptr< DefinitionResource > &) will handle the loading.
			 * @param filepath A Path::File object to the JSON file to load.
			 * @return std::pair< std::shared_ptr< Scene >, std::shared_ptr< DefinitionResource > >
			 */
			[[nodiscard]]
			SceneLoading loadScene (const Libraries::Path::File & filepath) noexcept;

			/**
			 * @brief Loads a scene from a JSON definition.
			 * @param sceneDefinition A scene definition object.
			 * @return std::pair< std::shared_ptr< Scene >, std::shared_ptr< DefinitionResource > >
			 */
			[[nodiscard]]
			SceneLoading loadScene (const std::shared_ptr< DefinitionResource > & sceneDefinition) noexcept;

			/**
			 * @brief Launches the process to refresh all scenes.
			 * @return bool
			 */
			bool refreshScenes () const noexcept;

			/**
			 * @brief Disables and delete a scene.
			 * @param sceneName The scene name.
			 * @return bool
			 */
			bool deleteScene (const std::string & sceneName) noexcept;

			/**
			 * @brief Disables active scene and clear all scene.
			 */
			void deleteAllScenes () noexcept;

			/**
			 * @brief Sets an active scene.
			 * @note This function will check the completeness of the scene with Scene::check().
			 * It register every notifiers with all concerned services.
			 * @param scene A reference to a smart pointer of the scene.
			 * @return bool
			 */
			bool enableScene (const std::shared_ptr< Scenes::Scene > & scene) noexcept;

			/**
			 * @brief Disables the active scene.
			 * @return bool
			 */
			bool disableScene () noexcept;

			/**
			 * @brief Creates a list of available scene names.
			 * @return std::vector< std::string >
			 */
			[[nodiscard]]
			std::vector< std::string > getSceneNameList () const noexcept;

			/**
			 * @brief Returns a scene from its name.
			 * @param sceneName A std::string for the name of the scene.
			 * @return std::shared_ptr< Scene >
			 */
			[[nodiscard]]
			std::shared_ptr< Scene > getScene (const std::string & sceneName) noexcept;

			/**
			 * @brief Returns a scene from its name.
			 * @param sceneName A std::string for the name of the scene.
			 * @return std::shared_ptr< const Scene >
			 */
			[[nodiscard]]
			std::shared_ptr< const Scene > getScene (const std::string & sceneName) const noexcept;

			/**
			 * @brief Returns the active scene.
			 * @return std::shared_ptr< Scene >
			 */
			[[nodiscard]]
			std::shared_ptr< Scene > activeScene () noexcept;

			/**
			 * @brief Returns whether the manager has an active scene.
			 * @return bool
			 */
			[[nodiscard]]
			bool hasActiveScene () const noexcept;

		private:

			/** @copydoc Emeraude::ServiceInterface::onInitialize() */
			bool onInitialize () noexcept override;

			/** @copydoc Emeraude::ServiceInterface::onTerminate() */
			bool onTerminate () noexcept override;

			const Arguments & m_arguments;
			Settings & m_coreSettings;
			Settings & m_applicationSettings;
			Resources::Manager & m_resourceManager;
			Graphics::Renderer & m_renderer;
			std::map< std::string, std::shared_ptr< Scene > > m_scenes{};
			std::shared_ptr< Scene > m_activeScene{};
	};
}
